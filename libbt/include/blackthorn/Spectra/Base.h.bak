#ifndef BLACKTHORN_SPECTRA_BASE_H
#define BLACKTHORN_SPECTRA_BASE_H

#include "blackthorn/PhaseSpace.h"
#include "blackthorn/Spectra/Conv.h"
#include "blackthorn/Spectra/Decay.h"
#include "blackthorn/Spectra/Rambo.h"
#include "blackthorn/Spectra/Splitting.h"
#include "blackthorn/Tensors.h"
#include <boost/math/quadrature/gauss_kronrod.hpp>
#include <memory>
#include <pybind11/numpy.h>
#include <pybind11/pybind11.h>
#include <tuple>

namespace blackthorn {

namespace py = pybind11;

static constexpr auto zero(double /*x*/) -> double { return 0.0; }

/// Compute the FSR spectrum dN/dx off a charged particle.
///
/// @param x Value of 2*energy/sqrt(s)
/// @param s Squared center-of-mass energy. For decays, sqrt(s) = mass. For
/// annihilations, sqrt(s) = 2m.
template <class F>
static auto dndx_photon_fsr(double x, double s) -> double { // NOLINT
  using tools::sqr;
  static constexpr double mf = F::mass;
  static constexpr double qf = quantum_numbers<F>::charge();

  if constexpr (qf == 0.0) {
    return 0.0;
  } else {
    const double pre = sqr(qf) * StandardModel::alpha_em / (2.0 * M_PI);
    const double xm = 1.0 - x;

    double kernel = 0.0;
    if constexpr (is_fermion<F>::value) {
      const double mu2 = sqr(mf) / s;
      if (M_E * mu2 < xm) {
        kernel = (1.0 + sqr(xm)) / x * (log(s * xm / sqr(mf)) - 1.0);
      }
    } else if constexpr (is_scalar_boson<F>::value) {
      const double mu2 = sqr(mf) / s;
      if (M_E * mu2 < xm) {
        kernel = 2.0 * xm / x * (log(s * xm / sqr(mf)) - 1.0);
      }
    } else if constexpr (is_vector_boson<F>::value) {
      const double y = s * sqr(xm) / sqr(2 * mf);
      const double lf1 = log(y) + 2.0 * log(1.0 - sqrt(1.0 - 1.0 / y));
      const double lf2 = log(s / sqr(mf));
      kernel = 2 * (x / xm * lf1 + xm / x * lf2 + x * xm * lf2);
    }

    return pre * kernel;
  }
}

template <class F>
static auto dnde_photon_fsr(double e, double s) -> double { // NOLINT
  const double e_to_x = 2.0 / sqrt(s);
  const double x = e * e_to_x;
  return dndx_photon_fsr<F>(x, s) * e_to_x;
}

template <class... FinalStates> class DecaySpectrum {
  using FinalStatesTuple = std::tuple<FinalStates...>;
  static constexpr size_t N = std::tuple_size_v<FinalStatesTuple>;
  using MatrixElementType =
      std::function<double(const std::array<double, N> &)>;

  double p_parent_mass;
  MatrixElementType p_msqrd = msqrd_flat<N>;

protected:
  auto dnde_rest_frame(double /*e*/) -> double { return 0.0; }

public:
  explicit DecaySpectrum(double parent_mass) : p_parent_mass(parent_mass) {}
};

// ===========================================================================
// ---- Two-Body final state -------------------------------------------------
// ===========================================================================

/// Class for computing spectra from the decay of a particle into a two-body
/// final state.
template <class Product, class P1, class P2>
class DecaySpectrum<Product, P1, P2> {
  double p_parent_mass;

protected:
  static constexpr double M1 = P1::mass;
  static constexpr double M2 = P2::mass;

  virtual auto fsr(double e) -> double {
    using tools::sqr;
    const double m = p_parent_mass;
    if (m < M1 + M2) {
      return 0.0;
    }

    // Only use this body if product is a photon.
    if constexpr (std::is_same_v<Product, Photon>) {
      return dnde_photon_fsr<P1>(e, m * m) + dnde_photon_fsr<P2>(e, m * m);
    } else {
      return 0.0;
    }
  }

  auto decay(double e) -> double {
    const double m = p_parent_mass;
    if (m < M1 + M2) {
      return 0.0;
    }
    const double e1 = tools::energy_one_cm(m, M1, M2);
    const double e2 = tools::energy_one_cm(m, M2, M1);
    return decay_spectrum<P1>::dnde_photon(e, e1) +
           decay_spectrum<P2>::dnde_photon(e, e2);
  }

  auto dnde_rest_frame(double e) -> double { return decay(e) + fsr(e); }

public:
  explicit DecaySpectrum(double parent_mass) : p_parent_mass(parent_mass) {}

  /// Compute the spectrum dN/dE from the decay of a particle X into a two
  /// particles A, B and a product P. X -> A + B + P.
  ///
  /// @param e Energy of the product.
  /// @param beta Boost velocity of the decaying particle.
  auto dnde(double e, double beta) -> double {
    using boost::math::quadrature::gauss_kronrod;
    static constexpr unsigned int GK_N = 15;
    static constexpr unsigned int GK_MAX_LIMIT = 7;
    constexpr double md = Product::mass;

    if (beta < 0.0 || 1.0 < beta || e < md) {
      return 0.0;
    }

    // If we are sufficiently close to the parent's rest-frame, use the
    // rest-frame result.
    if (beta < std::numeric_limits<double>::epsilon()) {
      return dnde_rest_frame(e);
    }

    const double gamma = 1.0 / std::sqrt(1.0 - beta * beta);

    const auto integrand = [&](double e1) -> double {
      if constexpr (is_massless<Product>::value) {
        return dnde_rest_frame(e1) / e1;
      } else {
        return dnde_rest_frame(e1) / sqrt(e1 * e1 - md * md);
      }
    };

    const double k = is_massless<Product>::value ? e : sqrt(e * e - md * md);
    const double eminus = gamma * (e - beta * k);
    const double eplus = gamma * (e + beta * k);
    const double pre = 1.0 / (2.0 * gamma * beta);

    return pre * gauss_kronrod<double, GK_N>::integrate(
                     integrand, eminus, eplus, GK_MAX_LIMIT, 1e-6);
  }

  /// Compute the spectrum dN/dx from the decay of a particle X into a two
  /// particles A, B and a product P. X -> A + B + P.
  ///
  /// @param x Scaled energy: x = 2 E / m, where m is the mass of X.
  /// @param beta Boost velocity of the decaying particle.
  auto dndx(double x, double beta) -> double { // NOLINT
    if (beta < 0.0 || 1.0 < beta) {
      return 0.0;
    }

    const double gamma = 1.0 / std::sqrt(1.0 - beta * beta);
    const double ep = p_parent_mass * gamma;
    const double e = x * ep / 2.0;
    const double l_dnde = dnde(e, beta);

    return l_dnde * ep / 2.0;
  }

  /// Compute the spectrum dN/dE from the decay of a particle X into a two
  /// particles A, B and a product P. X -> A + B + P.
  ///
  /// @param es Vector of energies of the product.
  /// @param beta Boost velocity of the decaying particle.
  auto dnde(const std::vector<double> &es, double beta) -> std::vector<double> {
    std::vector<double> result(es.size(), 0.0);
    std::transform(es.begin(), es.end(), result.begin(),
                   [&](double e) { return dnde(e, beta); });
    return result;
  }

  /// Compute the spectrum dN/dx from the decay of a particle X into a two
  /// particles A, B and a product P. X -> A + B + P.
  ///
  /// @param xs Vector of scaled energies: x = 2E/m, where m is the mass of X.
  /// @param beta Boost velocity of the decaying particle.
  auto dndx(const std::vector<double> &xs, double beta)
      -> std::vector<double> { // NOLINT
    std::vector<double> result(xs.size(), 0.0);
    std::transform(xs.begin(), xs.end(), result.begin(),
                   [&](double x) { return dndx(x, beta); });
    return result;
  }
};

// ===========================================================================
// ---- Three-Body final state -----------------------------------------------
// ===========================================================================

template <class Product, class P1, class P2, class P3>
class DecaySpectrum<Product, P1, P2, P3> {

  using MSqrdType =
      std::function<double(const std::array<LVector<double>, 3> &)>;
  using MSqrdRadType =
      std::function<double(const std::array<LVector<double>, 4> &)>;
  using EHist = EnergyHist<LinAxis>;

  static constexpr double M1 = P1::mass;
  static constexpr double M2 = P2::mass;
  static constexpr double M3 = P3::mass;
  static constexpr std::array<double, 3> fsp_masses = {M1, M2, M3};
  static constexpr unsigned int NBINS = 25;
  static constexpr size_t NEVENTS = 10000;
  static constexpr size_t NEVENTS_FSR = 1000;

  double p_parent_mass;
  MSqrdType p_msqrd;
  MSqrdRadType p_msqrd_rad;
  std::array<EHist, 3> p_edists{};
  EHist p_s_dist{};
  EHist p_t_dist{};
  EHist p_u_dist{};
  double p_width_non_rad = 0.0;

  auto make_energy_distributions() -> void {
    p_edists = energy_distributions_linear(p_msqrd, p_parent_mass, fsp_masses,
                                           {NBINS, NBINS, NBINS}, NEVENTS);
  }
  auto make_invariant_mass_distributions() -> void {
    p_s_dist = invariant_mass_distributions_linear<1, 2>(
        p_msqrd, p_parent_mass, fsp_masses, NBINS, NEVENTS);
    p_t_dist = invariant_mass_distributions_linear<0, 2>(
        p_msqrd, p_parent_mass, fsp_masses, NBINS, NEVENTS);
    p_u_dist = invariant_mass_distributions_linear<0, 1>(
        p_msqrd, p_parent_mass, fsp_masses, NBINS, NEVENTS);
  }

  // Compute the convolved decay spectrum from particle P
  // energy distribution `dist` and product energy `e`.
  template <class P>
  auto convolved_decay(double e, const EHist &dist) -> double {
    double val = 0.0;
#pragma unroll NBINS
    for (const auto &&h : boost::histogram::indexed(dist)) {
      const double dp = *h * h.bin().width();
      const double em = h.bin().center();
      val += dp * decay_spectrum<P>::dnde_photon(e, em);
    }
    return val;
  }

  // Compute the convolved FSR spectrum from particles F1 and F2 with
  // invariant-mass distribution `dist` and product energy `e`.
  template <class F1, class F2>
  auto convolved_fsr(double e, const EHist &dist) -> double {
    using tools::sqr;
    double val = 0.0;
    if constexpr (std::is_same_v<Product, Photon>) {
#pragma unroll NBINS
      for (const auto &&h : boost::histogram::indexed(dist)) {
        const double dp = *h * h.bin().width();
        const double s = sqr(h.bin().center());
        val += dp * (dnde_photon_fsr<F1>(e, s) + dnde_photon_fsr<F2>(e, s));
      }
    }
    return val;
  }

  auto decay(double e) -> double {
    return convolved_decay<P1>(e, p_edists[0]) +
           convolved_decay<P2>(e, p_edists[1]) +
           convolved_decay<P3>(e, p_edists[2]);
  }

  // Compute the FSR off the charged final state particles. Each final state
  // particle is convolved over two different invariant-mass distributions.
  //  Particle 1: t and u distributions
  //  Particle 2: s and u distributions
  //  Particle 3: s and t distributions
  // where:
  //  P = p1 + p2 + p3,
  //  s = (P - p1)^2 = (p2 + p3)^2,
  //  t = (P - p2)^2 = (p1 + p3)^2, and
  //  u = (P - p3)^2 = (p1 + p2)^2
  auto fsr(double e) -> double {
    return 0.5 * (convolved_fsr<P2, P3>(e, p_s_dist) +
                  convolved_fsr<P1, P3>(e, p_t_dist) +
                  convolved_fsr<P1, P2>(e, p_u_dist));
  }

  // Use RAMBO to compute FSR spectrum.
  auto fsr_rambo(double e) -> double {
    static_assert(std::is_same_v<Product, Photon>,
                  "Product must be a photon to use RAMBO FSR.");
    const double m = p_parent_mass;
    return photon_spectrum_rambo<decltype(p_msqrd_rad), 3>(
               p_msqrd_rad, e, m, fsp_masses, p_width_non_rad, NEVENTS_FSR)
        .first;
  }

  auto p_dnde_rest_frame(double e) -> double { return decay(e) + fsr(e); }

  auto p_dnde_rest_frame_rambo(double e) -> double {
    return decay(e) + fsr_rambo(e);
  }

  auto dnde_rest_frame(double e, bool use_rambo) -> double {
    if (use_rambo) {
      return p_dnde_rest_frame_rambo(e);
    }
    return p_dnde_rest_frame(e);
  }

public:
  /// Construct an decay spectrum object to compute the decay spectrum of a
  /// particle X into three particles A, B, and C and a product P.
  ///
  /// @param parent_mass Mass of the decaying particle.
  /// @param msqrd Squared matrix element for X -> A + B + C
  /// @param msqrd_rad Squared matrix element for X -> A + B + C + photon.
  explicit DecaySpectrum(double parent_mass, MSqrdType msqrd = msqrd_flat<3>,
                         MSqrdRadType msqrd_rad = msqrd_flat<4>)
      : p_parent_mass(parent_mass), p_msqrd(std::move(msqrd)),
        p_msqrd_rad(std::move(msqrd_rad)) {
    make_energy_distributions();
    make_invariant_mass_distributions();
    p_width_non_rad =
        Rambo<3>::decay_width(p_msqrd, parent_mass, fsp_masses).first;
  }

  auto parent_mass() const -> const double & { return p_parent_mass; }
  auto parent_mass(double mass) -> void {
    p_parent_mass = mass;
    make_energy_distributions();
    make_invariant_mass_distributions();
  }

  /// Compute the spectrum dN/dE from the decay of a particle X into a three
  /// particles A, B, C and a product P. X -> A + B + C + P.
  ///
  /// @param e Energy of the product.
  /// @param beta Boost velocity of the decaying particle.
  /// @param use_rambo If true, the FSR is computed using RAMBO.
  auto dnde(double e, double beta, bool use_rambo = false) -> double {
    using boost::math::quadrature::gauss_kronrod;
    static constexpr unsigned int GK_N = 15;
    static constexpr unsigned int GK_MAX_LIMIT = 7;
    constexpr double md = Product::mass;

    if (beta < 0.0 || 1.0 < beta || e < md) {
      return 0.0;
    }

    // If we are sufficiently close to the parent's rest-frame, use the
    // rest-frame result.
    if (beta < std::numeric_limits<double>::epsilon()) {
      return dnde_rest_frame(e, use_rambo);
    }

    const double gamma = 1.0 / std::sqrt(1.0 - beta * beta);

    const auto integrand = [&](double e1) -> double {
      if constexpr (is_massless<Product>::value) {
        return dnde_rest_frame(e1, use_rambo) / e1;
      } else {
        return dnde_rest_frame(e1, use_rambo) / sqrt(e1 * e1 - md * md);
      }
    };

    const double k = is_massless<Product>::value ? e : sqrt(e * e - md * md);
    const double eminus = gamma * (e - beta * k);
    const double eplus = gamma * (e + beta * k);
    const double pre = 1.0 / (2.0 * gamma * beta);

    return pre * gauss_kronrod<double, GK_N>::integrate(
                     integrand, eminus, eplus, GK_MAX_LIMIT, 1e-6);
  }

  /// Compute the spectrum dN/dx from the decay of a particle X into a three
  /// particles A, B, C and a product P. X -> A + B + C + P.
  ///
  /// @param x Scaled energy: x = 2 E / m, where m is the mass of X.
  /// @param beta Boost velocity of the decaying particle.
  /// @param use_rambo If true, the FSR is computed using RAMBO.
  auto dndx(double x, double beta, bool use_rambo = false) -> double { // NOLINT
    if (beta < 0.0 || 1.0 < beta) {
      return 0.0;
    }

    const double gamma = 1.0 / std::sqrt(1.0 - beta * beta);
    const double ep = p_parent_mass * gamma;
    const double e = x * ep / 2.0;
    const double l_dnde = dnde(e, beta, use_rambo);

    return l_dnde * ep / 2.0;
  }

  /// Compute the spectrum dN/dE from the decay of a particle X into a three
  /// particles A, B, C and a product P. X -> A + B + C + P.
  ///
  /// @param es Vector of energies of the product.
  /// @param beta Boost velocity of the decaying particle.
  /// @param use_rambo If true, the FSR is computed using RAMBO.
  auto dnde(const std::vector<double> &es, double beta, bool use_rambo = false)
      -> std::vector<double> {
    const auto f = [=](double x) { return dnde(x, beta, use_rambo); };
    return tools::vectorized_par(f, es);
  }

  /// Compute the spectrum dN/dx from the decay of a particle X into a three
  /// particles A, B, C and a product P. X -> A + B + C + P.
  ///
  /// @param xs Vector of scaled energies: x = 2E/m, where m is the mass of X.
  /// @param beta Boost velocity of the decaying particle.
  auto dndx(const std::vector<double> &xs, double beta, bool use_rambo = false)
      -> std::vector<double> { // NOLINT
    using tools::vectorized_par;
    const auto f = [=](double x) { return dndx(x, beta, use_rambo); };
    return tools::vectorized_par(f, xs);
  }
};

} // namespace blackthorn

#endif // BLACKTHORN_SPECTRA_BASE_H
