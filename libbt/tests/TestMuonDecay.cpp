#define CATCH_CONFIG_MAIN

#include "blackthorn/Models/Particles.h"
#include "blackthorn/Models/RhNeutrino.h"
#include "blackthorn/Models/StandardModel.h"
#include "blackthorn/Spectra.h"
#include <catch2/catch.hpp>
#include <chrono>
#include <fmt/format.h>
#include <iomanip>

namespace bt = blackthorn;

TEST_CASE("Photon Spectra", "[muon]") {
  static const double EM = 2 * bt::Muon::mass;
  static const std::array<double, 10> ES = {
      2.113167490000000000000000000000000000000000000000000e-4,
      4.216323458014376735302168776065038538835604749536584e-4,
      8.412671303495356961320746302089992154792253308363418e-4,
      1.678548602008440783774066352286479968175303139915551e-3,
      3.349144769431138106129676701935283662547983727635302e-3,
      6.682422345821087130367978554066091297776632697684469e-3,
      1.333318547932275323622150729662295462427827400039854e-2,
      2.660320252538296720691888934887606913319328206183537e-2,
      5.308036745638156314295478391281014493202196357150071e-2,
      1.059092568504186570043298907198651767478469762970324e-1};
  static const std::array<double, 10> DNDES = {
      70439.037186339579693993347843535286111771623391607,
      35059.552277027304838237730589331281128877433090005,
      17332.750199382617958948446782583194563510831524157,
      8457.618920954467515969444601618245208293244728991,
      4026.0630590853126442245084822145212384198056407806,
      1831.0598785514554585432890591203749568042855230721,
      764.1694000756752499278201022927411831033383496828,
      275.3280775478965890388463249981573373034486042301,
      75.5625498058377226257133167252524672791756031119,
      9.4116404657264617152335558905762464111888975188};

  for (size_t i = 0; i < 10; ++i) {
    auto dnde = bt::decay_spectrum<bt::Muon>::dnde_photon(ES[i], EM);
    CHECK(dnde == Approx(DNDES[i]));
  }
}

TEST_CASE("Positron Spectra", "[muon]") {
  static const double EM = 2 * bt::Muon::mass;
  static const std::array<double, 10> ES = {
      0.0005161089355610000000000000000000000000000000000000,
      0.0009418042208243371291823350974491168851905908604682,
      0.0017186200998407262579209192732118019730606167624019,
      0.0031361667130683373090627763914180335049273055590677,
      0.0057229294903913733770897801007977041712197495208879,
      0.010443297486550931877987894467694603972487768719204,
      0.019057103984194389933878905481763973989704913814266,
      0.034775722201928916370398810778133467921893935745104,
      0.063459319719761461250545835234724531743167402277703,
      0.115801628386355530760259364524002719306548092689222};
  static const std::array<double, 10> DNDES = {
      0.00299905894229656648897757202712052404987718138154,
      0.05890437716031723403432395839381864663195081992343,
      0.2172313300877760642878662280499805210411368601370,
      0.7120122390163922070107989780796125107595746390677,
      2.176463505510048121493073584142699780705278493698,
      5.946776262526272311456487772406298742387503784417,
      8.961332862529950139073689278045143864209654378807,
      8.637942706774138017941898919108866426401956503846,
      7.652640876793473377989363515266512712545523932724,
      4.928852222097771893708604450988932148061070210677};

  for (size_t i = 0; i < ES.size(); ++i) {
    auto dnde = bt::decay_spectrum<bt::Muon>::dnde_positron(ES[i], EM);
    CHECK(dnde == Approx(DNDES[i]));
  }
}

TEST_CASE("Muon-Neutrino Spectra", "[muon]") {
  static const double EM = 2 * bt::Muon::mass;
  static const std::array<double, 10> ES = {
      0.0002113167490000000000000000000000000000000000000000000,
      0.0004216323458014376735302168776065038538835604749536584,
      0.0008412671303495356961320746302089992154792253308363418,
      0.001678548602008440783774066352286479968175303139915551,
      0.003349144769431138106129676701935283662547983727635302,
      0.006682422345821087130367978554066091297776632697684469,
      0.01333318547932275323622150729662295462427827400039854,
      0.02660320252538296720691888934887606913319328206183537,
      0.05308036745638156314295478391281014493202196357150071,
      0.1059092568504186570043298907198651767478469762970324};
  static const std::array<double, 10> DNDES = {
      0.0036107159524933066209171383200942967661453085119198,
      0.014278500631394504245568760344286120104168972572931,
      0.056081032933657273442134595788045348323655694321913,
      0.21720425667157816909494392586071021040892970268687,
      0.81658248224397189377795324353373544682331425149062,
      2.8686169451631315858378763900352427322932754497617,
      8.3837984752579392528388228908637140056619127976239,
      8.8271352442577548707733397137071536797854331610364,
      8.0615643782958933386310604498601649592330828052963,
      5.5062592916601491381101656386044916937888158033193};
  for (size_t i = 0; i < 10; ++i) {
    auto dnde =
        bt::decay_spectrum<bt::Muon>::dnde_neutrino(ES[i], EM, bt::Gen::Snd);
    CHECK(dnde == Approx(DNDES[i]));
  }
}

TEST_CASE("Electron-Neutrino Spectra", "[muon]") {
  static const double EM = 2 * bt::Muon::mass;
  static const std::array<double, 10> ES = {
      0.0002113167490000000000000000000000000000000000000000000,
      0.0004216323458014376735302168776065038538835604749536584,
      0.0008412671303495356961320746302089992154792253308363418,
      0.001678548602008440783774066352286479968175303139915551,
      0.003349144769431138106129676701935283662547983727635302,
      0.006682422345821087130367978554066091297776632697684469,
      0.01333318547932275323622150729662295462427827400039854,
      0.02660320252538296720691888934887606913319328206183537,
      0.05308036745638156314295478391281014493202196357150071,
      0.1059092568504186570043298907198651767478469762970324};
  static const std::array<double, 10> DNDES = {
      0.0071970283017750416437401389458355546877259708527895,
      0.028363830285390464225960517514388272853034152751344,
      0.11063033643291480500674288742228846052872732732584,
      0.42225223192180992667005998256155681682737496691486,
      1.5366466986392025132994239494396915577860901695577,
      4.9707312893537374751635733798145630666825630649555,
      10.679724563533750416550723878082992304347163215338,
      10.385841356245950180224531863690949288848818892715,
      8.979037374225754182287918401377861313187444947449,
      4.8559121149073901355096963862207993802099439391161};

  for (size_t i = 0; i < 10; ++i) {
    auto dnde =
        bt::decay_spectrum<bt::Muon>::dnde_neutrino(ES[i], EM, bt::Gen::Fst);
    CHECK(dnde == Approx(DNDES[i]));
  }
}
